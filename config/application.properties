server.port=8082


# ===============================
# SPRING BOOT WEB THYMELEAF 
# ===============================
spring.thymeleaf.cache = false
spring.thymeleaf.check-template=true
spring.thymeleaf.check-template-location=true
spring.thymeleaf.enabled = true
spring.thymeleaf.encoding = UTF-8
spring.thymeleaf.mode= HTML
spring.thymeleaf.prefix.classpath=/templates/
#spring.thymeleaf.prefix =file:src/main/resources/templates/
#spring.thymeleaf.prefix= ${project.basedir}/src/main/resources/templates/
spring.thymeleaf.suffix= .html
#spring.thymeleaf.excluded-view-names=
#spring.thymeleaf.template-resolver-order=
#spring.thymeleaf.view-names=
spring.thymeleaf.servlet.content-type = text/html

spring.devtools.liereload.enabled = true
spring.devtools.add-properties = true

#spring.resources.static-locations = file:src/main/resources/static/
#static-locations: ${project.basedir}/src/main/resources/static/
spring.resources.cache.period = 0

spring.servlet.multipart.max-file-size = 50MB
spring.servlet.multipart.max-request-size = 50MB
spring.servlet.multipart.enabled = true
spring.servlet.multipart.location = ${java.io.tmpdir}


# permite agregar un parametro en la url con el tipo de formato para desplegar en pdf/excel, por defecto en html
spring.mvc.contentnegotiation.favor-parameter=true

# content type, modifica las cabeceras del response con application/pdf
spring.mvc.contentnegotiation.media-types.pdf = application/pdf
spring.mvc.contentnegotiation.media-types.xlsx = application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
spring.mvc.contentnegotiation.media-types.csv = text/csv
# media type de xml no es necesario, funciona mediantes rest full, lo hace automaticamente
spring.mvc.contentnegotiation.media-types.xml = application/xml
spring.mvc.contentnegotiation.media-types.json = application/json


spring.session.store-type = none
# files storage location (stores all files uploaded via REST API)
storage.location=./uploads

#We can use the httpOnly and secure flags to secure our session cookie:
#
#httpOnly: if true then browser script won't be able to access the cookie
#secure: if true then the cookie will be sent only over HTTPS connection

server.servlet.session.cookie.http-only = true
#server.servlet.session.cookiesecure= true

# 1 days = 1 * 24 * 60 * 60
cookie.maxAge=86400

server.error.include-stacktrace=always


# display whitelabel page when error page not exist
server.error.whitelabel.enabled=false

#management.context-path=/admin-starter


# ===============================
# KEYCLOAK SECURITY
# ===============================

keycloak.auth-server-url = http://127.0.0.1:8080/auth
keycloak.realm = shoolRealm
keycloak.resource = schoolClient
keycloak.principal-attribute=preferred_username
keycloak.public-client=true
keycloak.security-constraints[0].authRoles[0]=manager
keycloak.security-constraints[0].securityCollections[0].patterns[0]=/**
#
#keycloak.security-constraints[0].authRoles[0]=test
#keycloak.security-constraints[0].securityCollections[0].patterns[0]=/**
spring.main.allow-bean-definition-overriding=true


# ===============================
# LOGGING
# ===============================

logging.level.root=INFO
logging.file=log/full/full.log
logging.pattern.rolling-file-name=${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz
logging.pattern.console= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n

# ===============================
# DATABASE POOL
# ===============================

spring.datasource.tomcat.initial-size=15
spring.datasource.tomcat.max-wait=20000
spring.datasource.tomcat.max-active=50
spring.datasource.tomcat.max-idle=15
spring.datasource.tomcat.min-idle=8
spring.datasource.tomcat.default-auto-commit=true  

spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.maxLifetime=1800000

spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.id.new_generator_mappings=false

# ===============================
# DATABASE H2
# ===============================
#spring.h2.console.enabled=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect


# ===============================
# DATABASE MARIADB
# ===============================

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/schoolAlert
spring.datasource.username=olivier
spring.datasource.password=abc@1234


sping.flyway.enabled= true
sping.flyway.check-location = true
sping.flyway.locations = classpath:/db/migration

spring.flyway.baseline-on-migrate = true
#spring.flyway.baselineOnMigrate = true


# ===============================
# JPA / HIBERNATE MARIADB
# ===============================
 
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect


#------------------------------------------------------------------------------


# ===============================
# DATABASE MYSQL
# ===============================
 
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/mydatabase
#spring.datasource.username=root
#spring.datasource.password=12345
 
# ===============================
# JPA / HIBERNATE MYSQL
# ===============================
 
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

#------------------------------------------------------------------------------

# ===============================
# DATABASE  ORACLE
# ===============================
 
#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:db12c
#spring.datasource.username=mydatabase
#spring.datasource.password=12345
  
# ===============================
# JPA / HIBERNATE ORACLE
# ===============================
 
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect

#------------------------------------------------------------------------------

# ===============================
# DATABASE SQL_SERVER
# ===============================
 
#spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.datasource.url=jdbc:sqlserver://localhost\\SQLEXPRESS:1433;databaseName=mydatabase
#spring.datasource.username=sa
#spring.datasource.password=12345
 
 
# ===============================
# JPA / HIBERNATE SQL_SERVER
# ===============================
 
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect

#------------------------------------------------------------------------------

# ===============================
# DATABASE CONNECTION PostGres
# ===============================
 
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5432/mydatabase
#spring.datasource.username=postgres
#spring.datasource.password=12345
 
# ===============================
# JPA / HIBERNATE PostGres
# ===============================
 
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
 
 
# Fix Postgres JPA Error:
# Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented.
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

